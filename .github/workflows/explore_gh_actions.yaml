# This is a basic workflow to help you get started with Actions

name: learning how to use gh-actions

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab (github website)
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  my-job:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Check out another repository
      - uses: actions/checkout@v3
        with:
          repository: bioimage-io/collection-bioimage-io
          ref: gh-pages
          path: bioimageio-gh-pages
      - uses: actions/checkout@v3
        with:
          repository: ivan-ea/numpy-tiff-deepimagej
          ref: master
          path: numpy-tiff-deepimagej          

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: See directory structure of the gh VM
        run: |
          java -version
          pwd
          ls -la
          echo --
          ls -la bio*
          echo --
          ls $GITHUB_WORKSPACE | tee output.txt
          echo --
          echo ~
          echo --
          echo $HOME
      - name: Checking that previous output still there
        run: |
          ls
          cat output.txt

      # - name: Fake Fiji Setup
      #   run: |
      #     mkdir -p ~/blank_fiji/Fiji.app
      #     touch ~/blank_fiji/Fiji.app/ImageJ-linux64
      #     touch resources/models_to_test.txt

      - name: setup babashka
        uses: turtlequeue/setup-babashka@v1.5.0
        with:
          babashka-version: 1.1.173

      - name: run scripts for tests
        working-directory: ./java_CI_scripts
        run: |
          bb --version
          bb -m core.main -h
          bb -m core.main -u # run all unit tests
          bb "(require '[core.cli-test]) (clojure.test/run-tests 'core.cli-test)" # run core unit tests
          bb -m core.main -j pending_matrix/variety_models.json

      - name: check that initial pipeline of CI went OK
        run: |
          chmod +x ./bash_scripts/check_initial_CI.sh
          bash ./bash_scripts/check_initial_CI.sh
